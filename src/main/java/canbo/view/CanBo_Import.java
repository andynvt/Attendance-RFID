/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package canbo.view;

import administrator.settings.Config;
import static administrator.settings.Config.bg_Color1;
import static administrator.settings.Config.bg_Color2;
import static administrator.settings.Config.fg_Color1;
import static administrator.settings.Config.fg_Color2;
import app.view.App_View;
import canbo.controller.CanBo_Controller;
import canbo.model.CanBo_Model;
import other.custom.GradientButton;
import other.custom.RoundedBorder;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import other.custom.Alert;
import other.custom.TransitionPane;
import other.table.CustomTable;
import static resources.Resources.huy_Icon;
import static resources.Resources.luu_Icon;
import static resources.Resources.reimport_Icon;

/**
 *
 * @author chuna
 */
public class CanBo_Import extends javax.swing.JPanel implements ActionListener {

    private CustomTable tb_CanBo;
    private final String[] columnNames = {"Tất cả", "MSCB", "Họ tên", "Email", "Bộ môn", "Khoa", "Mã RFID"};
    private final String[] columnNames2 = {"MSCB", "Họ tên", "Email", "Bộ môn", "Khoa"};
    private Object[][] data;
    private static CanBo_View VIEW = CanBo_View.getView();
    private static ArrayList<CanBo_Model> tonTai;
    private static ArrayList<CanBo_Model> canBo_List;
    private JDialog dialog;

    /**
     * Creates new form Import_DSCB
     *
     */
    public CanBo_Import() {
        initComponents();
        createUI();
    }

    public CanBo_Import(Object[][] data) {
        initComponents();
        this.data = data;
        createUI();
        loadData();
    }

    private void createUI() {
        btn_Huy = new GradientButton(bg_Color1, bg_Color2, fg_Color1, fg_Color2, "Huỷ bỏ", huy_Icon);
        btn_Huy.addActionListener(this);

        btn_Luu = new GradientButton(bg_Color1, bg_Color2, fg_Color1, fg_Color2, "Lưu lại", luu_Icon);
        btn_Luu.addActionListener(this);

        btn_ReImport = new GradientButton(bg_Color1, bg_Color2, fg_Color1, fg_Color2, "Chọn tập tin khác", reimport_Icon);
        btn_ReImport.addActionListener(this);

        pnl_Action.add(btn_ReImport);
        pnl_Action.add(btn_Luu);
        pnl_Action.add(btn_Huy);
        pnl_Action.setBackground(Config.color_Action);
        dialog = new JDialog();
        dialog.setSize(new Dimension(507, 175));
        pnl_Duplicate.setVisible(false);
        dialog.getContentPane().add(pnl_Confirm);
        dialog.pack();
        dialog.setResizable(false);
        dialog.setAlwaysOnTop(true);
        dialog.setLocationRelativeTo(this);
    }

    public void setLabel(JLabel c) {
        c.setFont(new Font("Arial", 0, 14));
        c.setSize(new Dimension(c.getWidth(), 40));
        CompoundBorder border = new CompoundBorder(new RoundedBorder(), new EmptyBorder(5, 2, 5, 2));
        c.setBorder(border);
    }

    public void loadData() {
        DefaultTableModel defaultTableModel = new DefaultTableModel(data, columnNames);
        tb_CanBo = new CustomTable(data, columnNames);
        tb_CanBo.setModel(defaultTableModel);
        pnl_Table.add(tb_CanBo.getScrollPane());
        tb_CanBo.setCheckBox(0);
        tb_CanBo.hideColumn(0);
    }

    public Object[][] getData() {
        return data;
    }

    public void setData(Object[][] data) {
        this.data = data;
        loadData();
    }

    public JLabel getLbl_Title() {
        return lbl_Title;
    }

    public JButton getBtnReplace() {
        return btnReplace;
    }

    public JButton getBtnSkip() {
        return btnSkip;
    }

    public void setTitle(String s, boolean show) {
        this.lbl_Title.setText(s);
        this.lbl_Title.setVisible(show);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnl_Confirm = new javax.swing.JPanel();
        lblWarning = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        btnSkip = new javax.swing.JButton();
        btnReplace = new javax.swing.JButton();
        btnDetails = new javax.swing.JButton();
        pnl_Duplicate = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTonTai = new javax.swing.JTable();
        lbl_Title = new javax.swing.JLabel();
        pnl_Table = new javax.swing.JPanel();
        pnl_Path = new javax.swing.JPanel();
        pnl_Action = new javax.swing.JPanel();

        pnl_Confirm.setBackground(new java.awt.Color(255, 255, 255));

        lblWarning.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblWarning.setText("Có 1 cán bộ đã tồn tại trong hệ thống, bạn có muốn ghi đè lên dữ liệu cũ?");
        lblWarning.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 10));

        btnCancel.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lblTitle.setText("Import 14 cán bộ từ file excel");
        lblTitle.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 10));

        btnSkip.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnSkip.setText("Bỏ qua");
        btnSkip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSkipActionPerformed(evt);
            }
        });

        btnReplace.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnReplace.setText("Ghi đè");
        btnReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReplaceActionPerformed(evt);
            }
        });

        btnDetails.setText("Chi tiết");
        btnDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailsActionPerformed(evt);
            }
        });

        tblTonTai.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tblTonTai.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblTonTai.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        tblTonTai.setFillsViewportHeight(true);
        tblTonTai.setFocusable(false);
        tblTonTai.setRequestFocusEnabled(false);
        tblTonTai.setRowHeight(20);
        tblTonTai.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblTonTai.setShowHorizontalLines(false);
        tblTonTai.setShowVerticalLines(false);
        jScrollPane2.setViewportView(tblTonTai);

        javax.swing.GroupLayout pnl_DuplicateLayout = new javax.swing.GroupLayout(pnl_Duplicate);
        pnl_Duplicate.setLayout(pnl_DuplicateLayout);
        pnl_DuplicateLayout.setHorizontalGroup(
            pnl_DuplicateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_DuplicateLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane2)
                .addGap(0, 0, 0))
        );
        pnl_DuplicateLayout.setVerticalGroup(
            pnl_DuplicateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnl_ConfirmLayout = new javax.swing.GroupLayout(pnl_Confirm);
        pnl_Confirm.setLayout(pnl_ConfirmLayout);
        pnl_ConfirmLayout.setHorizontalGroup(
            pnl_ConfirmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_ConfirmLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_ConfirmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_ConfirmLayout.createSequentialGroup()
                        .addGroup(pnl_ConfirmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblWarning, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_ConfirmLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(pnl_ConfirmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_ConfirmLayout.createSequentialGroup()
                                .addComponent(btnDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnReplace)
                                .addGap(18, 18, 18)
                                .addComponent(btnSkip)
                                .addGap(18, 18, 18)
                                .addComponent(btnCancel))
                            .addComponent(pnl_Duplicate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(25, 25, 25))))
        );
        pnl_ConfirmLayout.setVerticalGroup(
            pnl_ConfirmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_ConfirmLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblWarning, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnl_Duplicate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(pnl_ConfirmLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDetails)
                    .addComponent(btnReplace)
                    .addComponent(btnSkip)
                    .addComponent(btnCancel))
                .addContainerGap())
        );

        pnl_ConfirmLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnDetails, btnReplace});

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        lbl_Title.setBackground(new java.awt.Color(255, 255, 255));
        lbl_Title.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        lbl_Title.setForeground(new java.awt.Color(102, 102, 102));
        lbl_Title.setText("Nhập danh sách cán bộ");
        lbl_Title.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 15, 10));
        lbl_Title.setOpaque(true);

        pnl_Table.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 15, 5, 15));
        pnl_Table.setOpaque(false);
        pnl_Table.setLayout(new java.awt.GridLayout(1, 0));

        pnl_Path.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 15, 15, 15));
        pnl_Path.setOpaque(false);
        pnl_Path.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 2));

        pnl_Action.setBackground(new java.awt.Color(204, 204, 255));
        pnl_Action.setMinimumSize(new java.awt.Dimension(0, 45));
        pnl_Action.setPreferredSize(new java.awt.Dimension(0, 45));
        pnl_Action.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 10, 2));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbl_Title, javax.swing.GroupLayout.DEFAULT_SIZE, 998, Short.MAX_VALUE)
            .addComponent(pnl_Table, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnl_Action, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnl_Path, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(lbl_Title)
                .addGap(0, 0, 0)
                .addComponent(pnl_Table, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(pnl_Path, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(pnl_Action, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        btn_Luu.setVisible(false);
    }//GEN-LAST:event_formComponentShown
    private String thatBai = "";
    private void btnReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReplaceActionPerformed
        CanBo_List.getController().add_CanBo(canBo_List);
        CanBo_List.getController().update_CanBo(tonTai);
        updateTable();

        if (!CanBo_Controller.getErrorMessage().equals("")) {
            Alert.showMessageDialog(VIEW, CanBo_Controller.getErrorMessage(), "Thông báo");
        } else {
            int countSuccess = 0;
            if (!CanBo_Controller.getAdd_Failed().isEmpty()) {
                thatBai = "";
                CanBo_Controller.getAdd_Failed().forEach((t) -> {
                    thatBai += "Thêm cán bộ có mã " + t.getMaCB() + " thất bại.\n";
                });
                Alert.showMessageDialog(VIEW, thatBai);
                countSuccess += canBo_List.size() - CanBo_Controller.getAdd_Failed().size();
            }
            if (!CanBo_Controller.getUpdate_Failed().isEmpty()) {
                thatBai = "";
                CanBo_Controller.getUpdate_Failed().forEach((t) -> {
                    thatBai += "Ghi đè cán bộ có mã " + t.getMaCB() + " thất bại.\n";
                });
                Alert.showMessageDialog(VIEW, thatBai);
                countSuccess += tonTai.size() - CanBo_Controller.getUpdate_Failed().size();
            }
            if (countSuccess > 0) {
                Alert.showMessageDialog(VIEW, "Đã import thành công " + countSuccess + " cán bộ.", "Thông báo");
            }

        }
    }//GEN-LAST:event_btnReplaceActionPerformed

    private void btnSkipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSkipActionPerformed
        CanBo_List.getController().add_CanBo(canBo_List);
        updateTable();
        if (!CanBo_Controller.getErrorMessage().equals("")) {
            Alert.showMessageDialog(VIEW, CanBo_Controller.getErrorMessage(), "Thông báo");
        } else {
            int countSuccess = 0;
            if (!CanBo_Controller.getAdd_Failed().isEmpty()) {
                thatBai = "";
                CanBo_Controller.getAdd_Failed().forEach((t) -> {
                    thatBai += "Thêm cán bộ có mã " + t.getMaCB() + " thất bại.\n";
                });
                Alert.showMessageDialog(VIEW, thatBai);
                countSuccess += canBo_List.size() - CanBo_Controller.getAdd_Failed().size();
            }
            if (countSuccess > 0) {
                Alert.showMessageDialog(VIEW, "Đã import thành công " + countSuccess + " cán bộ.", "Thông báo");
            }
        }
    }//GEN-LAST:event_btnSkipActionPerformed

    private void btnDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailsActionPerformed
        if (pnl_Duplicate.isVisible()) {
            pnl_Duplicate.setVisible(false);
            dialog.setSize(new Dimension(507, 175));
            dialog.validate();
            dialog.repaint();
            dialog.setLocationRelativeTo(this);
        } else {
            pnl_Duplicate.setVisible(true);
            dialog.setSize(new Dimension(507, 300));
            dialog.validate();
            dialog.repaint();
            dialog.setLocationRelativeTo(this);
        }
    }//GEN-LAST:event_btnDetailsActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        TransitionPane.closeDialogBox();
        dialog.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed
    private GradientButton btn_ReImport;
    private GradientButton btn_Huy;
    private GradientButton btn_Luu;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDetails;
    private javax.swing.JButton btnReplace;
    private javax.swing.JButton btnSkip;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblWarning;
    private javax.swing.JLabel lbl_Title;
    private javax.swing.JPanel pnl_Action;
    private javax.swing.JPanel pnl_Confirm;
    private javax.swing.JPanel pnl_Duplicate;
    private javax.swing.JPanel pnl_Path;
    private javax.swing.JPanel pnl_Table;
    private javax.swing.JTable tblTonTai;
    // End of variables declaration//GEN-END:variables
    public void setBtn_Luu(boolean f) {
        btn_Luu.setVisible(f);
    }

    public JPanel getPnl_Path() {
        return pnl_Path;
    }

    public void setPnl_Path(JPanel pnl_Path) {
        this.pnl_Path = pnl_Path;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        Object ob = e.getSource();
        if (ob.equals(btn_ReImport)) {
            import_CanBo();
        }
        if (ob.equals(btn_Luu)) {
            checkDuplicate();
            import2Table();
        }

        if (ob.equals(btn_Huy)) {
            TransitionPane.closeDialogBox();
        }

    }

    private void import_CanBo() {
        TransitionPane.setAlwaysOnTop(false);
        VIEW.import_CanBo();
    }

    private void checkDuplicate() {
        Object[][] current_Data = tb_CanBo.getTableData();
        Object[][] old_Data = CanBo_Controller.array2Object(CanBo_List.getController().load_CanBo());
        canBo_List = new ArrayList<>();
        tonTai = new ArrayList<>();
        if (current_Data.length != 0) {
            for (Object[] data_1 : current_Data) {
                for (Object[] old_Data1 : old_Data) {
                    if (data_1[1].equals(old_Data1[1])) {
                        tonTai.add(new CanBo_Model(
                                String.valueOf(data_1[1]),
                                String.valueOf(data_1[2]),
                                String.valueOf(data_1[3]),
                                String.valueOf(data_1[4]),
                                String.valueOf(data_1[5]),
                                String.valueOf(data_1[6])
                        ));
                        Arrays.fill(data_1, "");
                    }
                }
            }
            for (Object[] data_1 : current_Data) {
                if (!data_1[1].equals("")) {
                    canBo_List.add(new CanBo_Model(
                            String.valueOf(data_1[1]),
                            String.valueOf(data_1[2]),
                            String.valueOf(data_1[3]),
                            String.valueOf(data_1[4]),
                            String.valueOf(data_1[5]),
                            String.valueOf(data_1[6])
                    ));
                }
                System.out.println(String.valueOf(data_1[6]));
            }
        }

    }

    private void import2Table() {
        if (canBo_List.isEmpty() && tonTai.isEmpty()) {
            Alert.showMessageDialog(App_View.getContainer(), "File excel không có dữ liệu!", "Thông báo");
        } else {
            DefaultTableModel listModel = new DefaultTableModel();
            listModel.setColumnIdentifiers(columnNames2);
            if (!tonTai.isEmpty()) {
                TransitionPane.setAlwaysOnTop(false);
                tonTai.forEach((CanBo_Model t) -> {
                    Object[] obj = {t.getMaCB(), t.getTen(), t.getEmail(), t.getBoMon(), t.getKhoa(), t.getMaRFID()};
                    listModel.addRow(obj);
                });
                tblTonTai.setModel(listModel);
                lblTitle.setText("Import " + data.length + " cán bộ từ tập tin.");
                lblWarning.setText("Có " + listModel.getRowCount() + " cán bộ đã có trong hệ thống."
                        + " Bạn có muốn ghi đè lên dữ liệu cũ?");
                dialog.setTitle("Xác nhận import danh sách cán bộ");
                pnl_Duplicate.setVisible(false);
                dialog.show();
            } else {
                int select = Alert.showQuestionDialog(this, "Bạn muốn import " + canBo_List.size() + " cán bộ này?", "Xác nhận import");
                if (select == Alert.OK) {
                    int countSuccess = 0;
                    CanBo_List.getController().add_CanBo(canBo_List);
                    updateTable();
                    if (!CanBo_Controller.getErrorMessage().equals("")) {
                        Alert.showMessageDialog(VIEW, CanBo_Controller.getErrorMessage(), "Thông báo");
                    } else {
                        if (!CanBo_Controller.getAdd_Failed().isEmpty()) {
                            thatBai = "";
                            CanBo_Controller.getAdd_Failed().forEach((t) -> {
                                thatBai += "Thêm cán bộ có mã " + t.getMaCB() + " thất bại.\n";
                            });
                            Alert.showMessageDialog(VIEW, thatBai);
                            countSuccess += canBo_List.size() - CanBo_Controller.getAdd_Failed().size();
                        }
                        if (countSuccess > 0) {
                            Alert.showMessageDialog(VIEW, "Đã import thành công " + countSuccess + " cán bộ.", "Thông báo");
                        }
                    }
                }
            }
        }
    }

    private void updateTable() {
        TransitionPane.closeDialogBox();
        dialog.setVisible(false);
        VIEW.setTitle("Danh sách cán bộ", true);
        TransitionPane.replacePane(VIEW.getPnl_Pane(), VIEW.getPanel4());
        VIEW.getCollapse().setCollapsed(false);
        VIEW.getCanBoList().getPaneTable().getComboBoxItem().setSelectedIndex(0);
        VIEW.getCanBoList().getPaneTable().initFilterAndButtons();
        VIEW.refresh();
//        VIEW.showPanel();
    }
}
